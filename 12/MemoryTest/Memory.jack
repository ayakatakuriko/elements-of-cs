// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array RAM;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
      let freeList = 2048;
      let RAM = 0;
      let freeList[0] = 14335;
      let freeList[1] = null;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let RAM[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array p;
      var Array block;

      let p = freeList;
      while (~(p[0] > size)) {
        let p = p[1];
        if (p = null) {
          return -1;
        }
      }

      let block = p + (p[0] - size);
      let p[0] = p[0] - (size + 1);
      let block[-1] = size + 1;
      return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array segment;

      let segment = o - 1;
      let segment[0] = o[-1];
      let segment[1] = freeList[1];
      let freeList[1] = segment;
      return;
    }
}
