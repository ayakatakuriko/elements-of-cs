// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static int SCREEN;
    static boolean color;
    static Array twoToThe;
    /** Initializes the Screen. */
    function void init() {
      var int i, num;
      let twoToThe = Array.new(16);
      let i = 0;
      let num = 1;
      while (i < 16) {
        let twoToThe[i] = num;
        let num = num + num; // numを2倍にする
        let i = i + 1;
      }
      let SCREEN = 16384;
      let color = 1;

      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int c, r;
      let r = 0;

      while (r < 256) {
          let c = 0;
          while (c < 512) {
            do Memory.poke(SCREEN + (r * 32) + (c / 16), 0);
            let c = c + 1;
          }
          let r = r + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return ;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int r;

      let r = y - ((y / 16) * 16); // y % 16
      if (color) {
        // もとのメモリの値とORをとる
        do Memory.poke(SCREEN + (x * 32) + (y / 16), Memory.peek(SCREEN + (x * 32) + (y / 16)) | twoToThe[r]);
      } else {
      // もとのメモリの値とANDをとる
        do Memory.poke(SCREEN + (x * 32) + (y / 16), Memory.peek(SCREEN + (x * 32) + (y / 16)) & (~(twoToThe[r])));
      }
      return ;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int adyMinusbdx, a, b, dx, dy;
      let adyMinusbdx = 0;
      let dx = x2 - x1;
      let dy = y2 - y1;
      let a = 0;
      let b = 0;

      while (~(a > dx) & ~(b > dy)) {
        do Screen.drawPixel(x1 + a, y1 + b);
        if (adyMinusbdx < 0) {
          let a = a + 1;
          let adyMinusbdx = adyMinusbdx + dy;
        } else {
          let b = b + 1;
          let adyMinusbdx = adyMinusbdx - dx;
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int row;

      let row = 0;
      while (~(row > (y2 - y1))) { // row  <= y2 - y1
        do Screen.drawLine(x1, row + y1, x2, row + y1);
        let row = row + 1;
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy;

      if (r > 181) {
        return;
      }
      let dy = -r - 1;
      while (dy < r) {
        let dy = dy + 1;
        do Screen.drawLine(x - Math.sqrt((r * r) - (dy * dy)), y + dy, x + Math.sqrt((r * r) - (dy * dy)), y + dy);
      }
      return;
    }
}
