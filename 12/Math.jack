// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
      var int i, num;
      let twoToThe = Array.new(16);
      let i = 0;
      let num = 1;
      while (i < 16) {
        let twoToThe[i] = num;
        let num = num + num; // numを2倍にする
        let i = i + 1;
      }
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) { return -x ; }
      else { return x ; }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX, j;
      let sum = 0;
      let shiftedX = x;
      let j = 0;

      while (j < 16) {
        if (Math.bit(y, j)) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }

      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q, ax, ay;
      let ax = Math.abs(x);
      let ay = Math.abs(y);

      if (ay > ax) { return 0 ;}
      let q = Math.abs(Math.divide(x, y + y));
      if ((ax - ((q + q) * ay)) < ay) {
        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
          return -(q + q);
        } else {
          return q + q;
        }
      } else {
        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
          return -(q + q + 1);
        } else {
          return q + q + 1;
        }
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, j;
      let y = 0;
      let j = 7;

      while (j > -1) {
        if ((~(((y + twoToThe[j]) * (y + twoToThe[j])) > x)) & (((y + twoToThe[j]) * (y + twoToThe[j])) > 0)) {
          let y = y + twoToThe[j];
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) { return a ; }
      else { return b ; }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) { return a ; }
      else { return b ; }
    }

    function boolean bit(int x, int j) {
      return ~((twoToThe[j] & x) = 0);
    }
}
