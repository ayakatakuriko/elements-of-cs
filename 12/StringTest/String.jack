// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field int maxLen;
    field Array str;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLen = maxLength ;
        let length = 0;
        if (~(maxLen = 0)) {
          let str = Memory.alloc(maxLen);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
    if (~(maxLen = 0)) {
      do Memory.deAlloc(str);
    }
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let str[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (length = maxLen) {
        return this;
      }
      let str[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let length = length - 1;
      return ;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int i;
      var int ans;

      let i = 0;
      let ans = 0;
      if (str[i] = 45) {
       // 負の値
       let i = i + 1;
      }
      while ((i < length) & (str[i] > 47) & (str[i] < 58)) {
        let ans = ans * 10;
        let ans = (str[i] - 48) + ans;
        let i = i + 1;
      }
      if (str[0] = 45) {
       // 負の値
       return -ans;
      } else {
      return ans;
      }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int i, digit;
      var int ten, num;
      let i = 0;
      let ten = 10;
      let num = Math.abs(val);

      if (num < ten) {
        let digit = 1;
        let ten = 1;
      } else {
        let digit = 2;
        while ((~(num < ten)) & (digit < 5)) {
          let ten = ten * 10;
          let digit = digit + 1;
          }
          if (num < ten) {
            let ten = ten / 10;
            let digit = digit - 1;
          }
      }

      if (val < 0) {
        let str[0] = 45; // -
        let digit = digit + 1;
        let i = i + 1;
      }

      while (i < digit) {
        let str[i] = (num / ten) + 48;
        let num = num - ((num / ten) * ten);
        let i = i + 1;
        let ten = ten / 10;
      }
      let length = digit;
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
