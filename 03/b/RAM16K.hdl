// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    Not(in=load, out=linv);
    Or(a=load, b=linv, out=one);
    Not(in=one, out=zero);
    // r80~r87のどれにアクセスするのか
    // r8n=1のものにアクセス
    DMux4Way(sel=address[12..13], in=one, a=r80, b=r81, c=r82, d=r83);
    DMux4Way(sel=address[12..13], in=load, a=l0, b=l1, c=l2, d=l3);

    RAM4K(in=in, load=l0, address=address[0..11], out=d0);
    RAM4K(in=in, load=l1, address=address[0..11], out=d1);
    RAM4K(in=in, load=l2, address=address[0..11], out=d2);
    RAM4K(in=in, load=l3, address=address[0..11], out=d3);

    Not(in=r80, out=ri0);
    Not(in=r81, out=ri1);
    Not(in=r82, out=ri2);
    Not(in=r83, out=ri3);

    Zeros16(flag=ri0, in=d0, out=o0);
    Zeros16(flag=ri1, in=d1, out=o1);
    Zeros16(flag=ri2, in=d2, out=o2);
    Zeros16(flag=ri3, in=d3, out=o3);

    Add16(a=o0, b=o1, out=x0);
    Add16(a=o2, b=o3, out=x2);
    Add16(a=x0, b=x2, out=out);
}
