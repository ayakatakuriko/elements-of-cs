<class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<classVarDec>
<attribute>
	(name: test, kind: static, type: boolean, index: 0, defined)
</attribute>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<attribute>
	(name: game, kind: var, type: SquareGame, index: 0, defined)
</attribute>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<attribute>
	(name: game, kind: var, type: SquareGame, index: 0, used)
</attribute>
<symbol> = </symbol>
<expression>
<term>
<identifier> SquareGame </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<attribute>
	(name: game, kind: var, type: SquareGame, index: 0, used)
</attribute>
<symbol> . </symbol>
<identifier> run </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<attribute>
	(name: game, kind: var, type: SquareGame, index: 0, used)
</attribute>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> test </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<attribute>
	(name: i, kind: var, type: int, index: 0, defined)
</attribute>
<symbol> , </symbol>
<attribute>
	(name: j, kind: var, type: int, index: 1, defined)
</attribute>
<symbol> ; </symbol>
</varDec>
<varDec>
<attribute>
	(name: s, kind: var, type: String, index: 2, defined)
</attribute>
<symbol> ; </symbol>
</varDec>
<varDec>
<attribute>
	(name: a, kind: var, type: Array, index: 3, defined)
</attribute>
<symbol> ; </symbol>
</varDec>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<attribute>
	(name: s, kind: var, type: String, index: 2, used)
</attribute>
<symbol> = </symbol>
<expression>
<term>
<stringConstant> string constant </stringConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<attribute>
	(name: s, kind: var, type: String, index: 2, used)
</attribute>
<symbol> = </symbol>
<expression>
<term>
<keyword> null </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<attribute>
	(name: a, kind: var, type: Array, index: 3, used)
</attribute>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<attribute>
	(name: a, kind: var, type: Array, index: 3, used)
</attribute>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<attribute>
	(name: i, kind: var, type: int, index: 0, used)
</attribute>
<symbol> = </symbol>
<expression>
<term>
<attribute>
	(name: i, kind: var, type: int, index: 0, used)
</attribute>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<attribute>
	(name: j, kind: var, type: int, index: 1, used)
</attribute>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<attribute>
	(name: j, kind: var, type: int, index: 1, used)
</attribute>
<symbol> = </symbol>
<expression>
<term>
<attribute>
	(name: j, kind: var, type: int, index: 1, used)
</attribute>
</term>
<symbol> / </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<attribute>
	(name: i, kind: var, type: int, index: 0, used)
</attribute>
<symbol> = </symbol>
<expression>
<term>
<attribute>
	(name: i, kind: var, type: int, index: 0, used)
</attribute>
</term>
<symbol> | </symbol>
<term>
<attribute>
	(name: j, kind: var, type: int, index: 1, used)
</attribute>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
